// Scene setup
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('#container') });
renderer.setSize(window.innerWidth, window.innerHeight);

// Lighting
const light = new THREE.AmbientLight(0x404040, 5);  // Ambient light
scene.add(light);

const directionalLight = new THREE.DirectionalLight(0xffffff, 1);
directionalLight.position.set(10, 10, 10).normalize();
scene.add(directionalLight);

// Textures for the paintings
const textures = [];
const paintingFiles = [
    'assets/paintings/painting1.jpg',
    'assets/paintings/painting2.jpg',
    'assets/paintings/painting3.jpg',
    'assets/paintings/painting4.jpg',
    'assets/paintings/painting5.jpg',
    'assets/paintings/painting6.jpg'
];

const textureLoader = new THREE.TextureLoader();
paintingFiles.forEach(file => {
    textures.push(textureLoader.load(file));
});

// Create 3D planes for paintings
const paintingMeshes = [];
textures.forEach((texture, index) => {
    const geometry = new THREE.PlaneGeometry(10, 7);
    const material = new THREE.MeshBasicMaterial({ map: texture });
    const painting = new THREE.Mesh(geometry, material);
    painting.position.set(index * 15 - 45, 0, -50);
    scene.add(painting);
    paintingMeshes.push(painting);
});

// Statue (3D model)
const objLoader = new THREE.OBJLoader();
let statue;
objLoader.load('assets/statue/statue.obj', (object) => {
    statue = object;
    statue.scale.set(0.5, 0.5, 0.5);
    statue.position.set(0, -10, -30);
    scene.add(statue);
});

// Camera position
camera.position.z = 100;

// OrbitControls for camera movement
const controls = new THREE.OrbitControls(camera, renderer.domElement);

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}
animate();

// Handle resizing
window.addEventListener('resize', () => {
    renderer.setSize(window.innerWidth, window.innerHeight);
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
});
